---
# tasks file for ansible-role-osinit

# ----- hostname -----

- name: "set hostname '{{ inventory_hostname }}'"
  hostname:
    name: "{{ inventory_hostname }}"

# ----- selinux -----

- name: install selinux packages
  yum:
    name:
      - libselinux-python
      - selinux-policy

- name: "set '{{ 'enforcing' if env_selinux_enabled else 'permissive' }}' selinux"
  selinux:
    state: "{{ 'enforcing' if env_selinux_enabled else 'permissive' }}"
    policy: 'targeted'
  notify: reboot server

# ----- yum update -----

- name: yum update all packages
  yum:
    name: '*'
    state: latest  # noqa 403
  notify: reboot server
  when: env_yum_update

# ----- additional packages -----

- name: install additional packages
  yum:
    name: "{{ env_add_packages }}"
    state: latest  # noqa 403

# ----- locale -----

- name: check locale status
  shell: "cat /etc/locale.conf | grep {{ env_locale }}"
  register: locale_status
  check_mode: no
  failed_when: no
  changed_when: locale_status.rc != 0

- name: locale gen
  shell: "set -o pipefail; echo {{ env_locale }} | awk -F '.' '{system(\"localedef -f \"$2\" -i \"$1\" \"$1)}'"
  check_mode: no
  when: locale_status is changed

- name: "set locale '{{ env_locale }}'"
  command: "localectl set-locale LANG={{ env_locale }}"
  check_mode: no
  notify: reboot server
  when: locale_status is changed

# ----- timedate -----

- name: "set timezone '{{ env_timezone }}'"
  timezone:
    name: "{{ env_timezone }}"
  notify: reboot server

# ----- ntp -----

- name: install chrony package
  yum:
    name: chrony

- name: start chronyd service
  service:
    name: chronyd
    state: started
    enabled: yes

# ----- sshd -----

- name: install sshd package
  yum:
    name:
      - openssh-server

- name: start sshd service
  service:
    name: sshd
    state: started
    enabled: yes

- name: set sshd publickey authentication 'yes'
  lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PubkeyAuthentication '
    insertafter: '^#PubkeyAuthentication '
    line: 'PubkeyAuthentication yes'
    backup: yes
    validate: 'sshd -tf %s'
  notify: restart sshd service

# ----- admin user -----

- block:
    - name: "add admin user '{{ auth_admin_user }}'"
      user:
        name: '{{ auth_admin_user }}'

    - name: add ssh public key
      authorized_key:
        user: '{{ auth_admin_user }}'
        key: "{{ lookup( 'url' if auth_admin_public_key.startswith('http') else 'file', auth_admin_public_key) }}"

    - name: add admin sudoers
      lineinfile:
        path: '/etc/sudoers.d/{{ auth_admin_user }}'
        create: yes
        mode: '0600'
        regexp: '^%{{ auth_admin_user }}'
        line: '%{{ auth_admin_user }} ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

  when: auth_admin_user and auth_admin_public_key
